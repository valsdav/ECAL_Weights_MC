import argparse
import sys
sys.argv.append( '-b' ) # batch mode for root
import ROOT as r 
r.gStyle.SetOptStat(0)
import os
import tdrstyle
import CMS_lumi

'''
This script plots the bias distribution by ET bins for different conditions and different 
set of weights. Its input are the TGraph generated by the script **bias_analysis_byET_trains.cpp**.
'''

parser = argparse.ArgumentParser()
parser.add_argument("-i", "--inputfile", type=str, help="Input file", required=True)
parser.add_argument("-o", "--outputdir", type=str, help="Output dir", required=True)
parser.add_argument("-t", "--train", type=str, help="Train configuration", required=True)
parser.add_argument("-r", "--rings", type=str, help="Etarings region", required=True)
parser.add_argument('-b', '--batchroot', action="store_true" ) 
args = parser.parse_args()

train = args.train
ring = args.rings

if ring == "26_28":
    etamin = 2.3
    etamax = 3
elif ring == "22_25":
    etamin = 1.8
    etamax = 2.3
elif ring == "18_21":
    etamin = 1.5
    etamax = 1.8

if not os.path.exists(args.outputdir):
    os.makedirs(args.outputdir)

   # "48b7e": [0.,1.,2.,3.,5.,8.,12.,25.,45.,1000.],
    # "8b4e": [0.,1.,2.,3.,5.,8.,12.,1000.]
ETbins = {
    "48b7e": [0.5, 1.5, 2.5, 4, 6.5, 10, 18.5, 35],
    "8b4e": [0.5, 1.5, 2.5, 4, 6.5, 10]
}
et_bins = ETbins[train]

# tdr style
tdrstyle.setTDRStyle()
#CMS_lumi.lumiText = "Train: {}, eta ring interval: {}".format(train, ring.replace("_","-"))
CMS_lumi.lumiText = "(13 TeV)"

def set_maximum(mg):
    maximum = -1
    minimum = 10
    maxmax = -1
    for g in mg.GetListOfGraphs():
        nbin = g.GetN()
    
        for b in range(0, nbin+1):
            x = r.Double(0)
            y = r.Double(0)
            g.GetPoint(b,x,y)
            #print(y)
            if y > maxmax: 
                maxmax = y 
            if y < minimum:
                minimum = y
            if b > (nbin)//2:
                if y> maximum:
                    maximum = y
    #print(maximum, maxmax)
    if maximum > 0.3*maxmax:
        mg.GetYaxis().SetRangeUser(minimum-0.1, maxmax*3.5)
        

#######################
### Bias by ET bins plots
#######################

bias_label= ["gr_bias","gr_bias_Asf","gr_bias_BXsf","gr_bias_totsf",
         "gr_bias_nonzero", "gr_bias_nonzero_Asf",  "gr_bias_nonzero_BXsf", "gr_bias_nonzero_totsf"]


file = r.TFile(args.inputfile)

for b in bias_label:

    c1 = r.TCanvas("c1", "c1", 800, 600)
    mg = r.TMultiGraph()

    gr1 = file.Get("curr_" + train+"_" + b+"_mean")
    gr2 = file.Get("pu0_" + train+"_" + b+"_mean")
    gr3 = file.Get("pu0_newavg_" + train+"_" + b+"_mean")
    gr4 = file.Get("pu50s2_" + train+"_" + b+"_mean")
    gr5 = file.Get("pu50s30_" + train+"_" + b+"_mean")

    gr1.SetMarkerStyle(20)
    gr1.SetMarkerSize(0.6)
    gr1.SetMarkerColor(r.kOrange+1)
    gr1.SetLineColor(r.kOrange+1)
    gr2.SetMarkerStyle(20)
    gr2.SetMarkerSize(0.6)
    gr2.SetMarkerColor(r.kRed+1)
    gr2.SetLineColor(r.kRed+1)
    gr3.SetMarkerStyle(20)
    gr3.SetMarkerSize(0.6)
    gr3.SetMarkerColor(r.kCyan+1)
    gr3.SetLineColor(r.kCyan+1)
    gr4.SetMarkerStyle(20)
    gr4.SetMarkerSize(0.6)
    gr4.SetMarkerColor(r.kGreen+1)
    gr4.SetLineColor(r.kGreen+1)
    gr5.SetMarkerStyle(20)
    gr5.SetMarkerSize(0.6)
    gr5.SetMarkerColor(r.kBlue+1)
    gr5.SetLineColor(r.kBlue+1)
    gr1.SetLineWidth(2)
    gr2.SetLineWidth(2)
    gr3.SetLineWidth(2)
    gr4.SetLineWidth(2)
    gr5.SetLineWidth(2)

    mg.Add(gr1)
    mg.Add(gr2)
    mg.Add(gr3)
    mg.Add(gr4)
    mg.Add(gr5)

    mg.Draw("APL")
    set_maximum(mg)
    mg.SetTitle(";ET (GeV);Fractional bias".format(ring, train))

    leg = r.TLegend(0.67, 0.5, 0.95, 0.93)
    leg.AddEntry(gr1, "Current", "lp")
    leg.AddEntry(gr3, "New (avg)", "lp")
    leg.AddEntry(gr2, "Per strip (PU=0)", "lp")
    leg.AddEntry(gr4, "#splitline{PU optimized}{(PU=50, ET=2GeV)}", "lp")
    leg.AddEntry(gr5, "#splitline{PU optimized}{(PU=50, ET=30GeV)}", "lp")
    leg.Draw("same")
    
    for j in range(len(et_bins)):
        mg.GetXaxis().ChangeLabel(j+1,-1,-1,-1,-1,-1, "{:.1f}".format(et_bins[j]) )
    mg.GetXaxis().ChangeLabel(len(et_bins)+1,-1,-1,-1,-1,-1, ">{:.1f}".format(et_bins[-1]) )

    label = r.TPaveText(0.35, 0.68, 0.65, 0.88, "NB NDC" )
    ll = []
    ll.append(label.AddText("PU=50"))
    ll.append(label.AddText("{:.1f}<|#eta|<{:.1f}".format(etamin, etamax))) 
    ll.append(label.AddText("LHC filling "))
    ll.append(label.AddText("schema: "+ train))
    for l in ll:
        l.SetLineColor(r.kBlack)
    label.SetFillColor(r.kWhite)
    label.Draw("same")

    c1.SetGridy()
    c1.Update()
    #draw the lumi text on the canvas
    CMS_lumi.CMS_lumi(c1, 0, 0)
    c1.SetTicks()
    #c1.Draw()
    c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_mean.png")
    c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_mean.C")

    ########################
    # Spread plots

    c2 = r.TCanvas("c2", "c2", 800, 600)
    mg2 = r.TMultiGraph()

    gr1b = file.Get("curr_" + train+"_" + b+"_std")
    gr2b = file.Get("pu0_" + train+"_" + b+"_std")
    gr3b = file.Get("pu0_newavg_" + train+"_" + b+"_std")
    gr4b = file.Get("pu50s2_" + train+"_" + b+"_std")
    gr5b = file.Get("pu50s30_" + train+"_" + b+"_std")

    gr1b.SetMarkerStyle(20)
    gr1b.SetMarkerSize(0.6)
    gr1b.SetMarkerColor(r.kOrange+1)
    gr1b.SetLineColor(r.kOrange+1)
    gr2b.SetMarkerStyle(20)
    gr2b.SetMarkerSize(0.6)
    gr2b.SetMarkerColor(r.kRed+1)
    gr2b.SetLineColor(r.kRed+1)
    gr3b.SetMarkerStyle(20)
    gr3b.SetMarkerSize(0.6)
    gr3b.SetMarkerColor(r.kCyan+1)
    gr3b.SetLineColor(r.kCyan+1)
    gr4b.SetMarkerStyle(20)
    gr4b.SetMarkerSize(0.6)
    gr4b.SetMarkerColor(r.kGreen+1)
    gr4b.SetLineColor(r.kGreen+1)
    gr5b.SetMarkerStyle(20)
    gr5b.SetMarkerSize(0.6)
    gr5b.SetMarkerColor(r.kBlue+1)
    gr5b.SetLineColor(r.kBlue+1)
    gr1b.SetLineWidth(2)
    gr2b.SetLineWidth(2)
    gr3b.SetLineWidth(2)
    gr4b.SetLineWidth(2)
    gr5b.SetLineWidth(2)

    mg2.Add(gr1b)
    mg2.Add(gr2b)
    mg2.Add(gr3b)
    mg2.Add(gr4b)
    mg2.Add(gr5b)

    mg2.Draw("APL")
    set_maximum(mg2)
    #mg2.SetTitle("Spread % ET, eta rings {}, {} train, PU=50;ET (GeV);Fraction spread %".format(ring, train))
    mg2.SetTitle(";ET (GeV);Fraction spread".format(ring, train))

    leg = r.TLegend(0.67, 0.5, 0.95, 0.93)
    leg.AddEntry(gr1, "Current", "lp")
    leg.AddEntry(gr3, "New (avg)", "lp")
    leg.AddEntry(gr2, "Per strip (PU=0)", "lp")
    leg.AddEntry(gr4, "#splitline{PU optimized}{(PU=50, ET=2GeV)}", "lp")
    leg.AddEntry(gr5, "#splitline{PU optimized}{(PU=50, ET=30GeV)}", "lp")
    leg.Draw("same")
    
    for j in range(len(et_bins)):
        mg.GetXaxis().ChangeLabel(j+1,-1,-1,-1,-1,-1, "{:.1f}".format(et_bins[j]) )
    mg.GetXaxis().ChangeLabel(len(et_bins)+1,-1,-1,-1,-1,-1, ">{:.1f}".format(et_bins[-1]) )

    label = r.TPaveText(0.35, 0.68, 0.65, 0.88, "NB NDC" )
    ll = []
    ll.append(label.AddText("PU=50"))
    ll.append(label.AddText("{:.1f}<|#eta|<{:.1f}".format(etamin, etamax))) 
    ll.append(label.AddText("LHC filling "))
    ll.append(label.AddText("schema: "+ train))
    for l in ll:
        l.SetLineColor(r.kBlack)
    label.SetFillColor(r.kWhite)
    label.Draw("same")

    c2.SetGridy()
    c2.Update()
    #draw the lumi text on the canvas
    CMS_lumi.CMS_lumi(c2, 0, 0)
    c2.SetTicks()
    #c2.Draw()
    c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_std.png")
    c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_std.C")


################################
### Plot train
################################
#r.gStyle.SetTitleXOffset(0)
#r.gStyle.SetTitleYOffset(0)
#r.gStyle.SetPadBottomMargin(0.20)
#r.gStyle.SetPadLeftMargin(0.40)

bias_label= ["gr_train", "gr_train_Asf", "gr_train_BXsf", "gr_train_totsf"]

for b in bias_label:

    c1 = r.TCanvas("c1", "c1", 800, 600)
    mg = r.TMultiGraph()

    gr1 = file.Get("curr_" + train+"_" + b+"_mean")
    gr2 = file.Get("pu0_" + train+"_" + b+"_mean")
    gr3 = file.Get("pu0_newavg_" + train+"_" + b+"_mean")
    gr4 = file.Get("pu50s2_" + train+"_" + b+"_mean")
    gr5 = file.Get("pu50s30_" + train+"_" + b+"_mean")

    gr1.SetMarkerStyle(20)
    gr1.SetMarkerSize(0.6)
    gr1.SetMarkerColor(r.kOrange+1)
    gr1.SetLineColor(r.kOrange+1)
    gr2.SetMarkerStyle(20)
    gr2.SetMarkerSize(0.6)
    gr2.SetMarkerColor(r.kRed+1)
    gr2.SetLineColor(r.kRed+1)
    gr3.SetMarkerStyle(20)
    gr3.SetMarkerSize(0.6)
    gr3.SetMarkerColor(r.kCyan+1)
    gr3.SetLineColor(r.kCyan+1)
    gr4.SetMarkerStyle(20)
    gr4.SetMarkerSize(0.6)
    gr4.SetMarkerColor(r.kGreen+1)
    gr4.SetLineColor(r.kGreen+1)
    gr5.SetMarkerStyle(20)
    gr5.SetMarkerSize(0.6)
    gr5.SetMarkerColor(r.kBlue+1)
    gr5.SetLineColor(r.kBlue+1)
    gr1.SetLineWidth(2)
    gr2.SetLineWidth(2)
    gr3.SetLineWidth(2)
    gr4.SetLineWidth(2)
    gr5.SetLineWidth(2)

    mg.Add(gr1)
    mg.Add(gr2)
    mg.Add(gr3)
    mg.Add(gr4)
    mg.Add(gr5)


    mg.Draw("APL")
    set_maximum(mg)
    #mg.SetTitle("Bias by BX in train, eta rings {}, {} train, PU=50;BX of signal;Fractional bias %".format(ring, train))
    mg.SetTitle(";BX of signal;Fractional bias".format(ring, train))

    leg = r.TLegend(0.67, 0.5, 0.95, 0.93)
    leg.AddEntry(gr1, "Current", "lp")
    leg.AddEntry(gr3, "New (avg)", "lp")
    leg.AddEntry(gr2, "Per strip (PU=0)", "lp")
    leg.AddEntry(gr4, "#splitline{PU optimized}{(PU=50, ET=2GeV)}", "lp")
    leg.AddEntry(gr5, "#splitline{PU optimized}{(PU=50, ET=30GeV)}", "lp")
    leg.Draw("same")

    label = r.TPaveText(0.35, 0.68, 0.65, 0.88, "NB NDC" )
    ll = []
    ll.append(label.AddText("PU=50"))
    ll.append(label.AddText("{:.1f}<|#eta|<{:.1f}".format(etamin, etamax))) 
    ll.append(label.AddText("LHC filling "))
    ll.append(label.AddText("schema: "+ train))
    for l in ll:
        l.SetLineColor(r.kBlack)
    label.SetFillColor(r.kWhite)
    label.Draw("same")

    c1.SetGridy()
    c1.Update()
    CMS_lumi.CMS_lumi(c1, 0, 0)
    c1.SetTicks()
    #c1.Draw()
    c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_mean.png")
    c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_mean.C")

    ########################
    # Spread plots train

    c2 = r.TCanvas("c2", "c2", 800, 600)
    mg2 = r.TMultiGraph()

    gr1b = file.Get("curr_" + train+"_" + b+"_std")
    gr2b = file.Get("pu0_" + train+"_" + b+"_std")
    gr3b = file.Get("pu0_newavg_" + train+"_" + b+"_std")
    gr4b = file.Get("pu50s2_" + train+"_" + b+"_std")
    gr5b = file.Get("pu50s30_" + train+"_" + b+"_std")

    gr1b.SetMarkerStyle(20)
    gr1b.SetMarkerSize(0.6)
    gr1b.SetMarkerColor(r.kOrange+1)
    gr1b.SetLineColor(r.kOrange+1)
    gr2b.SetMarkerStyle(20)
    gr2b.SetMarkerSize(0.6)
    gr2b.SetMarkerColor(r.kRed+1)
    gr2b.SetLineColor(r.kRed+1)
    gr3b.SetMarkerStyle(20)
    gr3b.SetMarkerSize(0.6)
    gr3b.SetMarkerColor(r.kCyan+1)
    gr3b.SetLineColor(r.kCyan+1)
    gr4b.SetMarkerStyle(20)
    gr4b.SetMarkerSize(0.6)
    gr4b.SetMarkerColor(r.kGreen+1)
    gr4b.SetLineColor(r.kGreen+1)
    gr5b.SetMarkerStyle(20)
    gr5b.SetMarkerSize(0.6)
    gr5b.SetMarkerColor(r.kBlue+1)
    gr5b.SetLineColor(r.kBlue+1)
    gr1b.SetLineWidth(2)
    gr2b.SetLineWidth(2)
    gr3b.SetLineWidth(2)
    gr4b.SetLineWidth(2)
    gr5b.SetLineWidth(2)

    mg2.Add(gr1b)
    mg2.Add(gr2b)
    mg2.Add(gr3b)
    mg2.Add(gr4b)
    mg2.Add(gr5b)

    mg2.Draw("APL")
    mg2.SetTitle(";BX of signal;Fraction spread".format(ring, train))
    set_maximum(mg2)

    leg = r.TLegend(0.67, 0.5, 0.95, 0.93)
    leg.AddEntry(gr1, "Current", "lp")
    leg.AddEntry(gr3, "New (avg)", "lp")
    leg.AddEntry(gr2, "Per strip (PU=0)", "lp")
    leg.AddEntry(gr4, "#splitline{PU optimized}{(PU=50, ET=2GeV)}", "lp")
    leg.AddEntry(gr5, "#splitline{PU optimized}{(PU=50, ET=30GeV)}", "lp")
    leg.Draw("same")

    label = r.TPaveText(0.35, 0.68, 0.65, 0.88, "NB NDC" )
    ll = []
    ll.append(label.AddText("PU=50"))
    ll.append(label.AddText("{:.1f}<|#eta|<{:.1f}".format(etamin, etamax))) 
    ll.append(label.AddText("LHC filling "))
    ll.append(label.AddText("schema: "+ train))
    for l in ll:
        l.SetLineColor(r.kBlack)
    label.SetFillColor(r.kWhite)
    label.Draw("same")

    c2.SetGridy()
    c2.Update()
    CMS_lumi.CMS_lumi(c2, 0, 0)
    c2.SetTicks()
    #c2.Draw()
    c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_std.png")
    c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_std.C")


#  #############################
# ### Histo missing TPs
# ##############################

# histo_label = ["h_trueA_zero","h_trueA_zero_BXsf","h_trueA_zero_Asf","h_trueA_zero_totsf" ]

# for b in histo_label:

#     c1 = r.TCanvas("c1", "c1", 800, 600)

#     h1 = file.Get("curr_" + train+"_" + b)
#     h2 = file.Get("pu0_" + train+"_" + b)
#     h3 = file.Get("pu0_newavg_" + train+"_" + b)
#     h4 = file.Get("pu50s2_" + train+"_" + b)
#     h5 = file.Get("pu50s30_" + train+"_" + b)

#     h1.Scale(1/h1.Integral())
#     h2.Scale(1/h2.Integral())
#     h3.Scale(1/h3.Integral())
#     h4.Scale(1/h4.Integral())
#     h5.Scale(1/h5.Integral())

    
#     h1.SetLineColor(r.kOrange+1)
#     h2.SetLineColor(r.kRed+1)
#     h3.SetLineColor(r.kCyan+1)
#     h4.SetLineColor(r.kGreen+1)
#     h5.SetLineColor(r.kBlue+1)
#     h1.SetLineWidth(2)
#     h2.SetLineWidth(2)
#     h3.SetLineWidth(2)
#     h4.SetLineWidth(2)
#     h5.SetLineWidth(2)

#     h1.Draw("hist")
#     h2.Draw("hist same")
#     h3.Draw("hist same")
#     h4.Draw("hist same")
#     h5.Draw("hist same")


#     #h1.SetTitle("True ET of missing TPs, eta rings {}, {} train, PU=50;ET (GeV)".format(ring, train))
#     h1.SetTitle(";ET (GeV)".format(ring, train))


#     leg = r.TLegend(0.71, 0.5, 0.95, 0.91)
#     leg.AddEntry(gr1, "Current", "lp")
#     leg.AddEntry(gr3, "New (avg)", "lp")
#     leg.AddEntry(gr2, "Per strip (PU=0)", "lp")
#     leg.AddEntry(gr4, "#splitline{PU optimized}{(PU=50, ET=2GeV)}", "lp")
#     leg.AddEntry(gr5, "#splitline{PU optimized}{(PU=50, ET=30GeV)}", "lp")
#     leg.Draw("same")
    

#     label = r.TText()
#     label.SetNDC()
#     label.SetTextFont(42)
#     label.SetTextColor(1)
#     label.SetTextSize(0.04)
#     label.SetTextAlign(22)
#     label.DrawText(0.55, 0.89, "PU 50 simulation")

#     h1.GetXaxis().SetRangeUser(0, 50)
#     c1.SetGridy()
#     c1.Update()
#     CMS_lumi.CMS_lumi(c1, 0 ,0)
#     c1.SetTicks()
#     c1.SetLogy()
#     #c1.Draw()
#     c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ ".png")
#     c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ ".C")
# #######################
# # Cumulative plots

# for b in histo_label:

#     c2 = r.TCanvas("c2", "c2", 800, 600)

#     h1 = file.Get("curr_" + train+"_" + b)
#     h2 = file.Get("pu0_" + train+"_" + b)
#     h3 = file.Get("pu0_newavg_" + train+"_" + b)
#     h4 = file.Get("pu50s2_" + train+"_" + b)
#     h5 = file.Get("pu50s30_" + train+"_" + b)

#     # cumulative
#     h1 = h1.GetCumulative(False)
#     h2 = h2.GetCumulative(False)
#     h3 = h3.GetCumulative(False)
#     h4 = h4.GetCumulative(False)
#     h5 = h5.GetCumulative(False)

#     h1.SetLineColor(r.kOrange+1)
#     h2.SetLineColor(r.kRed+1)
#     h3.SetLineColor(r.kCyan+1)
#     h4.SetLineColor(r.kGreen+1)
#     h5.SetLineColor(r.kBlue+1)
#     h1.SetLineWidth(2)
#     h2.SetLineWidth(2)
#     h3.SetLineWidth(2)
#     h4.SetLineWidth(2)
#     h5.SetLineWidth(2)

#     h1.Draw("hist")
#     h2.Draw("hist same")
#     h3.Draw("hist same")
#     h4.Draw("hist same")
#     h5.Draw("hist same")


#     h1.SetTitle("True ET of missing TPs, eta rings {}, {} train, PU=50;ET (GeV);#missing TP > ET".format(ring, train))


#     leg = r.TLegend(0.71, 0.5, 0.95, 0.91)
#     leg.AddEntry(gr1, "Current", "lp")
#     leg.AddEntry(gr3, "New (avg)", "lp")
#     leg.AddEntry(gr2, "Per strip (PU=0)", "lp")
#     leg.AddEntry(gr4, "#splitline{PU optimized}{(PU=50, ET=2GeV)}", "lp")
#     leg.AddEntry(gr5, "#splitline{PU optimized}{(PU=50, ET=30GeV)}", "lp")
#     leg.Draw("same")
    

#     label = r.TText()
#     label.SetNDC()
#     label.SetTextFont(42)
#     label.SetTextColor(1)
#     label.SetTextSize(0.04)
#     label.SetTextAlign(22)
#     label.DrawText(0.55, 0.89, "PU 50 simulation")

#     h1.GetXaxis().SetRangeUser(0, 50)
#     c2.SetGridy()
#     c2.Update()
#     CMS_lumi.CMS_lumi(c2, 0,0)
#     c2.SetLogy()
#     c2.SetTicks()
#     #c1.Draw()
#     c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_cumul.png")
#     c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_cumul.C")
