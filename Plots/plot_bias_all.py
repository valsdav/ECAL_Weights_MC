import argparse
import sys
sys.argv.append( '-b' ) # batch mode for root
import ROOT as r 
r.gStyle.SetOptStat(0)
import os

'''
This script plots the bias distribution by ET bins for different conditions and different 
set of weights. Its input are the TGraph generated by the script **bias_analysis_byET_trains.cpp**.
'''

parser = argparse.ArgumentParser()
parser.add_argument("-i", "--inputfile", type=str, help="Input file", required=True)
parser.add_argument("-o", "--outputdir", type=str, help="Output dir", required=True)
parser.add_argument("-t", "--train", type=str, help="Output dir", required=True)
parser.add_argument("-r", "--rings", type=str, help="Etarings region", required=True)
parser.add_argument('-b', '--batchroot', action="store_true" ) 
args = parser.parse_args()

train = args.train
ring = args.rings

if not os.path.exists(args.outputdir):
    os.makedirs(args.outputdir)

ETbins = {
     "48b7e": [0.,1.,2.,3.,5.,8.,12.,25.,45.,1000.],
     "8b4e": [0.,1.,2.,3.,5.,8.,12.,1000.]
}
et_bins = ETbins[train]


#######################
### Bias by ET bins plots
#######################

bias_label= ["gr_bias","gr_bias_Asf","gr_bias_BXsf","gr_bias_totsf",
         "gr_bias_nonzero", "gr_bias_nonzero_Asf",  "gr_bias_nonzero_BXsf", "gr_bias_nonzero_totsf"]


file = r.TFile(args.inputfile)

for b in bias_label:

    c1 = r.TCanvas("c1", "c1", 1200, 700)
    mg = r.TMultiGraph()

    gr1 = file.Get("curr_" + train+"_" + b+"_mean")
    gr2 = file.Get("pu0_" + train+"_" + b+"_mean")
    gr3 = file.Get("pu0_newavg_" + train+"_" + b+"_mean")
    gr4 = file.Get("pu50s2_" + train+"_" + b+"_mean")
    gr5 = file.Get("pu50s30_" + train+"_" + b+"_mean")

    gr1.SetMarkerStyle(20)
    gr1.SetMarkerSize(0.6)
    gr1.SetMarkerColor(r.kOrange+1)
    gr1.SetLineColor(r.kOrange+1)
    gr2.SetMarkerStyle(20)
    gr2.SetMarkerSize(0.6)
    gr2.SetMarkerColor(r.kRed+1)
    gr2.SetLineColor(r.kRed+1)
    gr3.SetMarkerStyle(20)
    gr3.SetMarkerSize(0.6)
    gr3.SetMarkerColor(r.kCyan+1)
    gr3.SetLineColor(r.kCyan+1)
    gr4.SetMarkerStyle(20)
    gr4.SetMarkerSize(0.6)
    gr4.SetMarkerColor(r.kGreen+1)
    gr4.SetLineColor(r.kGreen+1)
    gr5.SetMarkerStyle(20)
    gr5.SetMarkerSize(0.6)
    gr5.SetMarkerColor(r.kBlue+1)
    gr5.SetLineColor(r.kBlue+1)
    gr1.SetLineWidth(2)
    gr2.SetLineWidth(2)
    gr3.SetLineWidth(2)
    gr4.SetLineWidth(2)
    gr5.SetLineWidth(2)

    mg.Add(gr1)
    mg.Add(gr2)
    mg.Add(gr3)
    mg.Add(gr4)
    mg.Add(gr5)


    mg.Draw("APL")

    #mg.SetTitle("Bias by ET, eta rings {}, {} train, PU=50;ET true (GeV);Bias %".format(ring, train))
    mg.SetTitle(";ET true (GeV);Bias %".format(ring, train))


    leg = r.TLegend(0.75, 0.65, 0.87, 0.85)
    leg.AddEntry(gr1, "Current", "lp")
    leg.AddEntry(gr2, "PU=0", "lp")
    leg.AddEntry(gr3, "PU0 new avg", "lp")
    leg.AddEntry(gr4, "PU50 S2", "lp")
    leg.AddEntry(gr5, "PU50 S30", "lp")
    leg.Draw("same")
    

    for j in range(len(et_bins)-2):
        mg.GetXaxis().ChangeLabel(j+1,-1,-1,-1,-1,-1, "{:.0f}<E<={:.0f}".format(et_bins[j],et_bins[j+1]))
    
    mg.GetXaxis().ChangeLabel(len(et_bins)-1,-1,-1,-1,-1,-1, "E>{:.0f}".format(et_bins[-2]))
    mg.GetXaxis().SetTitleOffset(1.3)

    label = r.TText()
    label.SetNDC()
    label.SetTextFont(42)
    label.SetTextColor(13)
    label.SetTextSize(0.04)
    label.SetTextAlign(22)
    label.DrawText(0.49, 0.83, "PU 50")

    c1.SetGridy()
    c1.Update()

    c1.SetTicks()
    #c1.Draw()
    c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_mean.png")

    ########################
    # Spread plots

    c2 = r.TCanvas("c2", "c2", 1200, 700)
    mg2 = r.TMultiGraph()

    gr1b = file.Get("curr_" + train+"_" + b+"_std")
    gr2b = file.Get("pu0_" + train+"_" + b+"_std")
    gr3b = file.Get("pu0_newavg_" + train+"_" + b+"_std")
    gr4b = file.Get("pu50s2_" + train+"_" + b+"_std")
    gr5b = file.Get("pu50s30_" + train+"_" + b+"_std")

    gr1b.SetMarkerStyle(20)
    gr1b.SetMarkerSize(0.6)
    gr1b.SetMarkerColor(r.kOrange+1)
    gr1b.SetLineColor(r.kOrange+1)
    gr2b.SetMarkerStyle(20)
    gr2b.SetMarkerSize(0.6)
    gr2b.SetMarkerColor(r.kRed+1)
    gr2b.SetLineColor(r.kRed+1)
    gr3b.SetMarkerStyle(20)
    gr3b.SetMarkerSize(0.6)
    gr3b.SetMarkerColor(r.kCyan+1)
    gr3b.SetLineColor(r.kCyan+1)
    gr4b.SetMarkerStyle(20)
    gr4b.SetMarkerSize(0.6)
    gr4b.SetMarkerColor(r.kGreen+1)
    gr4b.SetLineColor(r.kGreen+1)
    gr5b.SetMarkerStyle(20)
    gr5b.SetMarkerSize(0.6)
    gr5b.SetMarkerColor(r.kBlue+1)
    gr5b.SetLineColor(r.kBlue+1)
    gr1b.SetLineWidth(2)
    gr2b.SetLineWidth(2)
    gr3b.SetLineWidth(2)
    gr4b.SetLineWidth(2)
    gr5b.SetLineWidth(2)

    mg2.Add(gr1b)
    mg2.Add(gr2b)
    mg2.Add(gr3b)
    mg2.Add(gr4b)
    mg2.Add(gr5b)

    mg2.Draw("APL")

    #mg2.SetTitle("Spread % ET, eta rings {}, {} train, PU=50;ET true (GeV);Spread %".format(ring, train))
    mg2.SetTitle(";ET true (GeV);Spread %".format(ring, train))


    leg2 = r.TLegend(0.75, 0.65, 0.87, 0.85)
    leg2.AddEntry(gr1b, "Current", "lp")
    leg2.AddEntry(gr2b, "PU=0", "lp")
    leg2.AddEntry(gr3b, "PU0 new avg", "lp")
    leg2.AddEntry(gr4b, "PU50 S2", "lp")
    leg2.AddEntry(gr5b, "PU50 S30", "lp")
    leg2.Draw("same")
    

    for j in range(len(et_bins)-2):
        mg2.GetXaxis().ChangeLabel(j+1,-1,-1,-1,-1,-1, "{:.0f}<E<={:.0f}".format(et_bins[j],et_bins[j+1]))
    
    mg2.GetXaxis().ChangeLabel(len(et_bins)-1,-1,-1,-1,-1,-1, "E>{:.0f}".format(et_bins[-2]))
    mg2.GetXaxis().SetTitleOffset(1.3)

    label2 = r.TText()
    label2.SetNDC()
    label2.SetTextFont(42)
    label2.SetTextColor(13)
    label2.SetTextSize(0.04)
    label2.SetTextAlign(22)
    label2.DrawText(0.49, 0.83, "PU 50")

    c2.SetGridy()
    c2.Update()

    c2.SetTicks()
    #c2.Draw()
    c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_std.png")


##############################
### Histo missing TPs
##############################

histo_label = ["h_trueA_zero","h_trueA_zero_BXsf","h_trueA_zero_Asf","h_trueA_zero_totsf" ]

for b in histo_label:

    c1 = r.TCanvas("c1", "c1", 1200, 700)

    h1 = file.Get("curr_" + train+"_" + b)
    h2 = file.Get("pu0_" + train+"_" + b)
    h3 = file.Get("pu0_newavg_" + train+"_" + b)
    h4 = file.Get("pu50s2_" + train+"_" + b)
    h5 = file.Get("pu50s30_" + train+"_" + b)

    h1.Scale(1/h1.Integral())
    h2.Scale(1/h2.Integral())
    h3.Scale(1/h3.Integral())
    h4.Scale(1/h4.Integral())
    h5.Scale(1/h5.Integral())

    
    h1.SetLineColor(r.kOrange+1)
    h2.SetLineColor(r.kRed+1)
    h3.SetLineColor(r.kCyan+1)
    h4.SetLineColor(r.kGreen+1)
    h5.SetLineColor(r.kBlue+1)
    h1.SetLineWidth(2)
    h2.SetLineWidth(2)
    h3.SetLineWidth(2)
    h4.SetLineWidth(2)
    h5.SetLineWidth(2)

    h1.Draw("hist")
    h2.Draw("hist same")
    h3.Draw("hist same")
    h4.Draw("hist same")
    h5.Draw("hist same")


    #h1.SetTitle("True ET of missing TPs, eta rings {}, {} train, PU=50;ET true (GeV)".format(ring, train))
    h1.SetTitle(";ET true (GeV)".format(ring, train))



    leg = r.TLegend(0.75, 0.65, 0.87, 0.85)
    leg.AddEntry(h1, "Current", "lp")
    leg.AddEntry(h2, "PU=0", "lp")
    leg.AddEntry(h3, "PU0 new avg", "lp")
    leg.AddEntry(h4, "PU50 S2", "lp")
    leg.AddEntry(h5, "PU50 S30", "lp")
    leg.Draw("same")
    

    label = r.TText()
    label.SetNDC()
    label.SetTextFont(42)
    label.SetTextColor(13)
    label.SetTextSize(0.04)
    label.SetTextAlign(22)
    label.DrawText(0.49, 0.83, "PU 50")

    h1.GetXaxis().SetRangeUser(0, 50)
    c1.SetGridy()
    c1.Update()

    c1.SetTicks()
    c1.SetLogy()
    #c1.Draw()
    c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ ".png")

#######################
# Cumulative plots

for b in histo_label:

    c2 = r.TCanvas("c2", "c2", 1000, 700)

    h1 = file.Get("curr_" + train+"_" + b)
    h2 = file.Get("pu0_" + train+"_" + b)
    h3 = file.Get("pu0_newavg_" + train+"_" + b)
    h4 = file.Get("pu50s2_" + train+"_" + b)
    h5 = file.Get("pu50s30_" + train+"_" + b)

    # cumulative
    h1 = h1.GetCumulative(False)
    h2 = h2.GetCumulative(False)
    h3 = h3.GetCumulative(False)
    h4 = h4.GetCumulative(False)
    h5 = h5.GetCumulative(False)

    h1.SetLineColor(r.kOrange+1)
    h2.SetLineColor(r.kRed+1)
    h3.SetLineColor(r.kCyan+1)
    h4.SetLineColor(r.kGreen+1)
    h5.SetLineColor(r.kBlue+1)
    h1.SetLineWidth(2)
    h2.SetLineWidth(2)
    h3.SetLineWidth(2)
    h4.SetLineWidth(2)
    h5.SetLineWidth(2)

    h1.Draw("hist")
    h2.Draw("hist same")
    h3.Draw("hist same")
    h4.Draw("hist same")
    h5.Draw("hist same")


    h1.SetTitle("True ET of missing TPs, eta rings {}, {} train, PU=50;ET true (GeV);#missing TP > ET".format(ring, train))


    leg = r.TLegend(0.73, 0.64, 0.87, 0.85)
    leg.AddEntry(h1, "Current", "lp")
    leg.AddEntry(h2, "PU=0", "lp")
    leg.AddEntry(h3, "PU0 new avg", "lp")
    leg.AddEntry(h4, "PU50 S2", "lp")
    leg.AddEntry(h5, "PU50 S30", "lp")
    leg.Draw("same")
    

    label = r.TText()
    label.SetNDC()
    label.SetTextFont(42)
    label.SetTextColor(13)
    label.SetTextSize(0.04)
    label.SetTextAlign(22)
    label.DrawText(0.49, 0.83, "PU 50")

    h1.GetXaxis().SetRangeUser(0, 50)
    c2.SetGridy()
    c2.Update()
    c2.SetLogy()
    c2.SetTicks()
    #c1.Draw()
    c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_cumul.png")


################################
### Plot train
################################


bias_label= ["gr_train", "gr_train_Asf", "gr_train_BXsf", "gr_train_totsf"]

for b in bias_label:

    c1 = r.TCanvas("c1", "c1", 1200, 700)
    mg = r.TMultiGraph()

    gr1 = file.Get("curr_" + train+"_" + b+"_mean")
    gr2 = file.Get("pu0_" + train+"_" + b+"_mean")
    gr3 = file.Get("pu0_newavg_" + train+"_" + b+"_mean")
    gr4 = file.Get("pu50s2_" + train+"_" + b+"_mean")
    gr5 = file.Get("pu50s30_" + train+"_" + b+"_mean")

    gr1.SetMarkerStyle(20)
    gr1.SetMarkerSize(0.6)
    gr1.SetMarkerColor(r.kOrange+1)
    gr1.SetLineColor(r.kOrange+1)
    gr2.SetMarkerStyle(20)
    gr2.SetMarkerSize(0.6)
    gr2.SetMarkerColor(r.kRed+1)
    gr2.SetLineColor(r.kRed+1)
    gr3.SetMarkerStyle(20)
    gr3.SetMarkerSize(0.6)
    gr3.SetMarkerColor(r.kCyan+1)
    gr3.SetLineColor(r.kCyan+1)
    gr4.SetMarkerStyle(20)
    gr4.SetMarkerSize(0.6)
    gr4.SetMarkerColor(r.kGreen+1)
    gr4.SetLineColor(r.kGreen+1)
    gr5.SetMarkerStyle(20)
    gr5.SetMarkerSize(0.6)
    gr5.SetMarkerColor(r.kBlue+1)
    gr5.SetLineColor(r.kBlue+1)
    gr1.SetLineWidth(2)
    gr2.SetLineWidth(2)
    gr3.SetLineWidth(2)
    gr4.SetLineWidth(2)
    gr5.SetLineWidth(2)

    mg.Add(gr1)
    mg.Add(gr2)
    mg.Add(gr3)
    mg.Add(gr4)
    mg.Add(gr5)


    mg.Draw("APL")

    #mg.SetTitle("Bias by BX in train, eta rings {}, {} train, PU=50;BX of signal;Bias %".format(ring, train))
    mg.SetTitle(";BX of signal;Bias %".format(ring, train))


    leg = r.TLegend(0.75, 0.65, 0.87, 0.85)
    leg.AddEntry(gr1, "Current", "lp")
    leg.AddEntry(gr2, "PU=0", "lp")
    leg.AddEntry(gr3, "PU0 new avg", "lp")
    leg.AddEntry(gr4, "PU50 S2", "lp")
    leg.AddEntry(gr5, "PU50 S30", "lp")
    leg.Draw("same")
    

    label = r.TText()
    label.SetNDC()
    label.SetTextFont(42)
    label.SetTextColor(13)
    label.SetTextSize(0.04)
    label.SetTextAlign(22)
    label.DrawText(0.49, 0.83, "PU 50")

    c1.SetGridy()
    c1.Update()

    c1.SetTicks()
    #c1.Draw()
    c1.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_mean.png")

    ########################
    # Spread plots train

    c2 = r.TCanvas("c2", "c2", 1200, 700)
    mg2 = r.TMultiGraph()

    gr1b = file.Get("curr_" + train+"_" + b+"_std")
    gr2b = file.Get("pu0_" + train+"_" + b+"_std")
    gr3b = file.Get("pu0_newavg_" + train+"_" + b+"_std")
    gr4b = file.Get("pu50s2_" + train+"_" + b+"_std")
    gr5b = file.Get("pu50s30_" + train+"_" + b+"_std")

    gr1b.SetMarkerStyle(20)
    gr1b.SetMarkerSize(0.6)
    gr1b.SetMarkerColor(r.kOrange+1)
    gr1b.SetLineColor(r.kOrange+1)
    gr2b.SetMarkerStyle(20)
    gr2b.SetMarkerSize(0.6)
    gr2b.SetMarkerColor(r.kRed+1)
    gr2b.SetLineColor(r.kRed+1)
    gr3b.SetMarkerStyle(20)
    gr3b.SetMarkerSize(0.6)
    gr3b.SetMarkerColor(r.kCyan+1)
    gr3b.SetLineColor(r.kCyan+1)
    gr4b.SetMarkerStyle(20)
    gr4b.SetMarkerSize(0.6)
    gr4b.SetMarkerColor(r.kGreen+1)
    gr4b.SetLineColor(r.kGreen+1)
    gr5b.SetMarkerStyle(20)
    gr5b.SetMarkerSize(0.6)
    gr5b.SetMarkerColor(r.kBlue+1)
    gr5b.SetLineColor(r.kBlue+1)
    gr1b.SetLineWidth(2)
    gr2b.SetLineWidth(2)
    gr3b.SetLineWidth(2)
    gr4b.SetLineWidth(2)
    gr5b.SetLineWidth(2)

    mg2.Add(gr1b)
    mg2.Add(gr2b)
    mg2.Add(gr3b)
    mg2.Add(gr4b)
    mg2.Add(gr5b)

    mg2.Draw("APL")

    #mg2.SetTitle("Spread % by BX in train, eta rings {}, {} train, PU=50;BX of signal;Spread %".format(ring, train))
    mg2.SetTitle(";BX of signal;Spread %".format(ring, train))


    leg2 = r.TLegend(0.75, 0.65, 0.87, 0.85)
    leg2.AddEntry(gr1b, "Current", "lp")
    leg2.AddEntry(gr2b, "PU=0", "lp")
    leg2.AddEntry(gr3b, "PU0 new avg", "lp")
    leg2.AddEntry(gr4b, "PU50 S2", "lp")
    leg2.AddEntry(gr5b, "PU50 S30", "lp")
    leg2.Draw("same")
    

    label2 = r.TText()
    label2.SetNDC()
    label2.SetTextFont(42)
    label2.SetTextColor(13)
    label2.SetTextSize(0.04)
    label2.SetTextAlign(22)
    label2.DrawText(0.49, 0.83, "PU 50")

    c2.SetGridy()
    c2.Update()

    c2.SetTicks()
    #c2.Draw()
    c2.SaveAs(args.outputdir +"/" + b + "_"+ train +"_"+ring+ "_std.png")